// Copyright (c) 2023 Ziga Miklosic
// All Rights Reserved
// This software is under MIT licence (https://opensource.org/licenses/MIT)
////////////////////////////////////////////////////////////////////////////////
/**
*@file      wdt_if.c
*@brief     Watchdog Platform Interface
*@author    Ziga Miklosic
*@email     ziga.miklosic@gmail.com
*@date      27.08.2023
*@version   V1.1.0
*/
////////////////////////////////////////////////////////////////////////////////
/*!
* @addtogroup WATCHDOG CONFIGURATIONS
* @{ <!-- BEGIN GROUP -->
*
* 	Put code that is platform depended inside code block start with
* 	"USER_CODE_BEGIN" and with end of "USER_CODE_END".
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include <stdint.h>
#include <stdlib.h>
#include "wdt_if.h"
#include "wdt_cfg.h"

// USER INCLUDE START...

#include "drivers/peripheral/iwdt/iwdt/src/iwdt.h"

#include "stm32g4xx_hal.h"
#include "cmsis_os2.h"

// USER INCLUDE END...

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

// USER DEFINITIONS BEGIN...

/**
 * 	Watchdog mutex timeout
 *
 * 	Unit: ms
 */
#define WDT_CFG_MUTEX_TIMEOUT_MS				( 10 )

// USER DEFINITIONS END...

////////////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////////////

// USER VARIABLES BEGIN...

/**
 * 	Watchdog OS mutex
 */
static osMutexId_t	g_wdt_mutex_id = NULL;
const osMutexAttr_t g_wdt_mutex_attr =
{
    .name 		= "watchdog",
    .attr_bits 	= ( osMutexPrioInherit ),
};

// USER VARIABLES END...

////////////////////////////////////////////////////////////////////////////////
// Function Prototypes
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
*		Watchdog platform initilization
*
* @note     User shall provide definition of that function based 
*           on used platform!
*
* @return		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
wdt_status_t wdt_if_init(void)
{
    wdt_status_t status = eWDT_OK;

    // USER CODE START...

    // Init mutex
    g_wdt_mutex_id = osMutexNew( &g_wdt_mutex_attr );

    if ( NULL == g_wdt_mutex_id )
    {
        status = eWDT_ERROR;
    }

    // Init LL watchdog driver
    status = (wdt_status_t) iwdt_init();

    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Watchdog platform WDT timer start
*
* @note     User shall provide definition of that function based 
*           on used platform!
*
* @return		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
wdt_status_t wdt_if_start(void)
{
    wdt_status_t status = eWDT_OK;

    // USER CODE START...

    status = (wdt_status_t) iwdt_start();

    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Watchdog platform WDT timer kick
*
* @note     User shall provide definition of that function based 
*           on used platform!
*
* @return		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
wdt_status_t wdt_if_kick(void)
{
    wdt_status_t status = eWDT_OK;

    // USER CODE START...

    status = (wdt_status_t) iwdt_kick();

    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Get platform system ticks
*
* @note     User shall provide definition of that function based 
*           on used platform!
*
* @return		systick - System time ticks 
*/
////////////////////////////////////////////////////////////////////////////////
uint32_t wdt_if_get_systick(void)
{
    uint32_t systick = 0;

    // USER CODE START...

    systick = HAL_GetTick();

    // USER CODE END...

    return systick;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Get watchdog mutex
*
* @note     User shall provide definition of that function based 
*           on used platform!
*
*           Return eWDT_OK if successfully acquire otherwise
*           return eWDT_ERROR
*
* @return		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
wdt_status_t wdt_if_aquire_mutex(void)
{
    wdt_status_t status = eWDT_OK;

    // USER CODE START...

	if ( osOK != osMutexAcquire( g_wdt_mutex_id, WDT_CFG_MUTEX_TIMEOUT_MS ))
	{
	    status = eWDT_ERROR;
	}

    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Release watchdog mutex
*
* @note     User shall provide definition of that function based 
*           on used platform!
*
*           Return /ref eWDT_OK if successfully acquire otherwise 
*           return /ref eWDT_ERROR
*
* @return		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
wdt_status_t wdt_if_release_mutex(void)
{
    wdt_status_t status = eWDT_OK;

    // USER CODE START...

    osMutexRelease( g_wdt_mutex_id );

    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Watchdog pre-reset ISR 
*
* @note     User shall provide definition of that function based 
*           on used platform!
*
*           Also put here /ref wdt_pre_reset_isr_callback if needed!
*
*
* @code     // Example code: TODO:
*
* @endcode
*
* @return		void
*/
////////////////////////////////////////////////////////////////////////////////
// TODO: ...

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
