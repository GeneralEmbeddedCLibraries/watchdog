// Copyright (c) 2021 Ziga Miklosic
// All Rights Reserved
// This software is under MIT licence (https://opensource.org/licenses/MIT)
////////////////////////////////////////////////////////////////////////////////
/**
*@file      wdt_if.c
*@brief     Watchdog Platform Interface
*@author    Ziga Miklosic
*@date      02.09.2021
*@version   V1.0.0
*/
////////////////////////////////////////////////////////////////////////////////
/*!
* @addtogroup WATCHDOG CONFIGURATIONS
* @{ <!-- BEGIN GROUP -->
*
* 	Put code that is platform depended inside code block start with
* 	"USER_CODE_BEGIN" and with end of "USER_CODE_END".
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include <stdint.h>
#include <stdlib.h>
#include "wdt_if.h"

// USER INCLUDE START...


// USER INCLUDE END...

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Function Prototypes
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
*		Watchdog platform initilization
*
* @note     User shall provide definition of that function based 
*           on used platform!
*
* @return		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
wdt_status_t wdt_if_init(void)
{
    wdt_status_t status = eWDT_OK;

    // USER CODE START...


    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Watchdog platform de-initilization
*
* @note     User shall provide definition of that function based 
*           on used platform!
*
* @return		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
wdt_status_t wdt_if_deinit(void)
{
    wdt_status_t status = eWDT_OK;

    // USER CODE START...


    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Watchdog platform WDT timer start
*
* @note     User shall provide definition of that function based 
*           on used platform!
*
* @return		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
wdt_status_t wdt_if_start(void)
{
    wdt_status_t status = eWDT_OK;

    // USER CODE START...


    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Watchdog platform WDT timer kick
*
* @note     User shall provide definition of that function based 
*           on used platform!
*
* @return		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
wdt_status_t wdt_if_kick(void)
{
    wdt_status_t status = eWDT_OK;

    // USER CODE START...


    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Get platform system ticks
*
* @note     User shall provide definition of that function based 
*           on used platform!
*
* @return		systick - System time ticks 
*/
////////////////////////////////////////////////////////////////////////////////
uint32_t wdt_if_get_systick(void)
{
    uint32_t systick = 0;

    // USER CODE START...


    // USER CODE END...

    return systick;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Get watchdog mutex
*
* @note     User shall provide definition of that function based 
*           on used platform!
*
*           Return /ref eWDT_OK if successfully acquire otherwise 
*           return /ref eWDT_ERROR
*
* @return		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
wdt_status_t wdt_if_aquire_mutex(void)
{
    wdt_status_t status = eWDT_OK;

    // USER CODE START...


    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Release watchdog mutex
*
* @note     User shall provide definition of that function based 
*           on used platform!
*
*           Return /ref eWDT_OK if successfully acquire otherwise 
*           return /ref eWDT_ERROR
*
* @return		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
wdt_status_t wdt_if_release_mutex(void)
{
    wdt_status_t status = eWDT_OK;

    // USER CODE START...


    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Watchdog pre-reset ISR 
*
* @note     User shall provide definition of that function based 
*           on used platform!
*
*           Also put here /ref wdt_pre_reset_isr_callback if needed!
*
*
* @code     // Example code: TODO:
*
* @endcode
*
* @return		void
*/
////////////////////////////////////////////////////////////////////////////////
// TODO: ...

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
